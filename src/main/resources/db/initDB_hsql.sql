DROP TABLE user_roles IF EXISTS;
DROP TABLE prices IF EXISTS;
DROP TABLE votes IF EXISTS;
DROP TABLE menus IF EXISTS;
DROP TABLE users IF EXISTS;
DROP TABLE restaurants IF EXISTS;

/*del if problem with vote accept*/
DROP SEQUENCE VOTE_SEQ IF EXISTS;
DROP SEQUENCE GLOBAL_SEQ IF EXISTS;
/*del if problem with vote accept*/
CREATE SEQUENCE VOTE_SEQ AS INTEGER START WITH 1000;
CREATE SEQUENCE GLOBAL_SEQ AS INTEGER START WITH 100000;


CREATE TABLE users
(
  id      INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name    VARCHAR(255) NOT NULL
);
CREATE UNIQUE INDEX users_unique_name_idx ON USERS (name);

CREATE TABLE user_roles
(
  user_id INTEGER NOT NULL,
  role    VARCHAR(255),
  CONSTRAINT user_roles_idx UNIQUE (user_id, role),
  FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE restaurants
(
  id                INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  name              VARCHAR(255) NOT NULL
);
CREATE UNIQUE INDEX restaurants_unique_name_idx ON RESTAURANTS (name);

CREATE TABLE menus
(
  id              INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
  restaurants_id  INTEGER NOT NULL,
  date            DATE DEFAULT now() NOT NULL,
  CONSTRAINT menus_idx UNIQUE (restaurants_id, date),
  FOREIGN KEY (restaurants_id) REFERENCES restaurants (id) ON DELETE CASCADE
);

CREATE TABLE prices
(
  menu_id INTEGER NOT NULL,
  dish    VARCHAR(255) NOT NULL,
  price   FLOAT NOT NULL,
  CONSTRAINT prices_idx UNIQUE (menu_id, dish),
  FOREIGN KEY (menu_id) REFERENCES menus (id) ON DELETE CASCADE
);

CREATE TABLE votes
(
  /*del if problem with vote accept*/
  id       INTEGER GENERATED BY DEFAULT AS SEQUENCE VOTE_SEQ PRIMARY KEY,
  user_id  INTEGER NOT NULL,
  menu_id  INTEGER NOT NULL,
  CONSTRAINT votes_idx UNIQUE (user_id, menu_id),
  FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
  FOREIGN KEY (menu_id) REFERENCES menus (id) ON DELETE CASCADE
);